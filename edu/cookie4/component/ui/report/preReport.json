[
    {
        "id": "1",
        "name": "강윤수",
        "etc": "전역의 이름 공간은 최소한도로 줄이는게 좋습니다. 만일 BrandView나 RestaurantView 가 덮어 써질 수도 있기 때문이죠.<br/>그리고 JavaScript에서의 함수의 호출은 상당한 비용이 들며, 함수의 생성 또한 비용이 큽니다.<br/>이 함수들은 호출때마다 함수와 데이터 배열을 생성하고, 실행합니다. 렌더링 함수를 공통으로 빼 뒀으면 더 좋았을 것 같습니다.",
        "score": 7
    },
    {
        "id": "2",
        "name": "이태헌",
        "etc": "전역에 객체 네임스페이스에 이해를 하고 계시네요. 네임스페이스를 두는건 아주 좋은 선택입니다.<br/>하지만 레스토랑과 신발 브랜드를 포함할 상위 네임스페이스를 둔다면 더욱 좋을 것 같습니다.<br/><br/>데이터를 별도 스페이스에 분리해 둔 것도 좋은 방법 같습니다.",
        "score": 8
    },
    {
        "id": "3",
        "name": "이효정",
        "etc": "익명 함수를 사용한 모듈화는 Very Good.<br/>이 방법을 좀 더 발전시키면 CommonJS, AMD (<a target='_blank' href='http://helloworld.naver.com/helloworld/textyle/12864'>참고링크</a>) 표준에 대응하기도 쉽죠.<br/><br/>데이터를 분리하거나 공통 함수를 분리했다면 더욱 훌륭했을 것 같습니다.",
        "score": 8
    },
    {
        "id": "4",
        "name": "김지선",
        "etc": "함수 모듈화 방법은 고전적이지만 소중한 전역의 이름 공간을 낭비하는 경향이 있긴 합니다.<br/>디렉토리 구조를 나눈 것이 눈에 띄네요.<br/><br/>메인 스크립트에 같은 변수 (bv)를 두번 선언한 것은 실수이려나요.",
        "score": 7
    },
    {
        "id": "5",
        "name": "하욱주",
        "etc": "일반적으로 new로 호출될 함수는 생성자라고 불리는데, 이런 생성자 함수는 변수명을 대문자로 하는게 일반적 관례입니다.<br/>생성자 함수는 그냥 호출했을때 굉장한 악영향이 있기 때문이죠",
        "score": 7
    },
    {
        "id": "6",
        "name": "이동호",
        "etc": "생성자 함수를 바로 호출하는 방법을 사용했네요.<br/>이 경우 바로 생성하는 것보다, 메인 함수에서 생성하여 쓰게 하는 방법도 생각해보면 좋을 것 같습니다.",
        "score": 7
    },
    {
        "id": "7",
        "name": "이중석",
        "etc": "배울 시간은 많습니다. 공부할 시간도 충분하구요. 언제든 질문해주세요.",
        "score": 0
    },
    {
        "id": "8",
        "name": "김선영",
        "etc": "메일이 너무 공손해서 놀랬네요.<br/>두가지 방식이 혼재된 것 같은데, 이렇게 구현한 이유가 있는지 궁금합니다.",
        "score": 7
    },
    {
        "id": "9",
        "name": "염수진",
        "etc": "유일하게 메일에 프로필 사진이 걸려있네요. 멋집니다.<br/>객체 리터럴을 사용한 구현이네요. <br/>전역 네임스페이스를 고려했다면 더욱 좋은 코드가 나올 것 같습니다.",
        "score": 8
    },
    {
        "id": "10",
        "name": "이성준",
        "etc": "밑밥깔기!..ㅎㅎ<br/>전역의 이름 공간은 최소한도로 줄이는게 좋습니다. 만일 BrandView나 RestaurantView 가 덮어 써질 수도 있기 때문이죠.<br/>그리고 JavaScript에서의 함수의 호출은 상당한 비용이 들며, 함수의 생성 또한 비용이 큽니다.<br/>이 함수들은 호출때마다 함수와 데이터 배열을 생성하고, 실행합니다. 렌더링 함수를 공통으로 빼 뒀으면 더 좋았을 것 같습니다.",
        "score": 7
    },
    {
        "id": "11",
        "name": "김일인",
        "etc": "perfect. 자세한 주석도 감동입니다.<br/>구현을 처음부터  끝까지 혼자 힘으로만 했다면 가르칠게 별로 없을 정도입니다.",
        "score": 10
    },
    {
        "id": "12",
        "name": "진경숙",
        "etc": "두 뷰의 구현을 다르게 했는데, 이유가 궁금합니다.<br/>둘의 차이와 뭐가 더 나은 방법인지 고민해보면 더욱 좋을 것 같습니다",
        "score": 6
    },
    {
        "id": "13",
        "name": "한강수",
        "etc": "객체 리터럴 형식으로 간단히 구현했네요. <br/>전역 네임스페이스를 고려했다면 더욱 좋은 코드가 나올 것 같습니다.",
        "score": 8
    },
    {
        "id": "14",
        "name": "천명호",
        "etc": "JavaScript 에는 클래스가 없기에 구현한 방법은 함수로 래핑한 방법입니다.<br/>함수가 전역에 선언되기에 전역 이름공간 충돌을 피할 방법을 좀 더 고민해보면 좋을 것 같습니다.",
        "score": 7
    },
    {
        "id": "15",
        "name": "왕언준",
        "etc": "JavaScript의 정석적인 모듈 구현을 적용했네요. 멋지게 구현했습니다.<br/>Private 접근제어도 알고 있는 것 같네요. Good.",
        "score": 9
    },
    {
        "id": "16",
        "name": "김규원",
        "etc": "변수의 선언과 할당의 차이는 뭘까요? 이 것을 이해하면 아주 좋은 코드가 나왔을 것 같습니다.",
        "score": 8
    },
    {
        "id": "17",
        "name": "김성진",
        "etc": "실제 구현 코드에서는 this 를 사용한 구현이 없지만, 주석에는 언급이 있네요.<br/>구현 자체는 정석적인 구현입니다.<br/>this를 사용한 코드로 하려면 구현을 좀 더 바꿔야 할 것 같습니다.",
        "score": 9
    },
    {
        "id": "18",
        "name": "김준형",
        "etc": "특정 스코프 내부의 함수에서 밖의 변수에 접근하는 data는 this의 속성으로 할당하지 않아도 가비지컬렉션 되지 않습니다. 이걸 Closure라고 하죠.",
        "score": 7
    },
    {
        "id": "19",
        "name": "김석홍",
        "etc": "data변수를 별도 프로퍼티나 변수로 분리하면 더 좋았을 것 같습니다.<br/>들여쓰기는 약간 아쉽습니다.",
        "score": 7
    },
    {
        "id": "20",
        "name": "안상희",
        "etc": "재미있다고 하니 좋네요! 애니메이션은 구현하지 않아도 됐지만 이런저런 시도해보는 것도 코딩의 한 재미죠.<br/><br/>주석과 코드에서 조금씩 잘못된 부분이 있는데, 구현된 코드는 이름을 가지지 않은 익명 함수 (anonymous function)이며 즉시 실행시 BrandView등의 변수를 넘기는 것은 의미가 없어 보입니다. 실제로 함수 내부에서 사용하고 있지 않고 딱히 사용처도 없어 보입니다.<br/><br/>인자 부분을 제외한 구현 코드는 정석적인 방법으로 구현된 모듈 패턴의 좋은 예가 되겠네요",
        "score": 7
    },
    {
        "id": "21-1",
        "name": "신동욱-1",
        "etc": "무려 3개를 내주신 의욕적인 태도!<br/>객체 리터럴과 JSON 의 차이는 뭘까요",
        "score": 9
    },
    {
        "id": "21-2",
        "name": "신동욱-2",
        "etc": "prototype을 사용했을 때와 함수 내부의 this를 사용했을때 어떤 차이가 있을까요?",
        "score": 9
    },
    {
        "id": "21-3",
        "name": "신동욱-3",
        "etc": "싱글톤의 정의..? 이상 질문에 대해 깊이 생각해보면 좋을 것 같습니다!",
        "score": 7
    },
    {
        "id": "22",
        "name": "이상희",
        "etc": "최소 수정과 가독성이 좋네요.<br/>생성자 함수가 아니면 함수의 이름은 소문자로 쓰는게 좋고, 액션을 수행하는 동사 단어를 쓰면 더욱 좋습니다.",
        "score": 7
    },
    {
        "id": "23",
        "name": "양혜숙",
        "etc": "주석이 조금이라도 있었으면...<br/>네임스페이스 구현은 모듈화의 기초로 정확히 이해하는게 중요합니다.",
        "score": 7
    },
    {
        "id": "24",
        "name": "최연(성?)호",
        "etc": "메일이름과 과제 이름이 달라서 당황했습니다;<br/>주석의 설명 중 window 스코프 설명이 훌륭합니다. 다만 data 는 this 에 할당하지 않아도 내부 함수에서 스코프를 폐쇄하기에 가비지컬렉트되지 않고 언제든 사용할 수 있습니다.<br/>이편이 더욱 안전하구요.",
        "score": 7
    },
    {
        "id": "25",
        "name": "박규철",
        "etc": "무난한 정석 모듈화 구현입니다.<br/>구현의 이유를 주석으로 설명해줬으면 더욱 좋았을 것 같습니다.",
        "score": 8
    },
    {
        "id": "26",
        "name": "김혜민",
        "etc": "Style~ 저도 구현할때 심심하면 이런저런 스타일을 줘서 놀기(?) 도 하는데 굳은 머리를 식힐 수 있어 좋죠.<br/><br/>구현 자체는 정석적인 모듈 패턴이네요. 전역 네임스페이스를 둬도 괜찮을 것 같고, 나중에 모듈 표준(<a target='_blank' href='http://helloworld.naver.com/helloworld/textyle/12864'>참고링크</a>)을 적용하기도 좋은 구현입니다.",
        "score": 9.5
    },
    {
        "id": "27",
        "name": "신지연",
        "etc": "JavaScript는 Class-less언어라 엄밀히 따지면 클래스가 없습니다. 구현한 방식은 객체에 속성을 추가하여 구현한 방식으로 객체를 일정 공간으로 활용하여 모듈화한 방식이죠.<br/><br/>주석을 좀 더 달았으면 더욱 좋았을 것 같습니다.<br/><br/>!!:코드 하일라이터 스크립트는 왜 넣으셨나요;;",
        "score": 7
    },
    {
        "id": "28",
        "name": "홍준혁",
        "etc": "익명 함수와 객체 리터럴이란 무엇일까요?",
        "score": 8
    },
    {
        "id": "29",
        "name": "구교진",
        "etc": "함수를 네임스페이스로 사용하여 에서 내부 함수를 호출하는 방식인데, 구현을 좀 더 발전시켜서 함수보다 일반 객체에 필요한 변수를 속성으로 할당하는 방법이 더욱 좋을 것 같습니다",
        "score": 7
    },
    {
        "id": "30",
        "name": "이한결",
        "etc": "차별화된 애니메이션이 먼저 눈에 띄네요. 다만 함수의 생성자 패턴은 대문자로 시작하는게 일반적 관례입니다.",
        "score": 7
    },
    {
        "id": "31",
        "name": "유제현",
        "etc": "네임스페이스 구현은 아주 좋네요. 나중에 모듈 표준과 적용하기 쉽습니다",
        "score": 7
    },
    {
        "id": "32",
        "name": "홍지오",
        "etc": "익명 함수가 기명 함수에 비해 얻는 이점은 무엇일까요.<br/>변수를 선언하여 불필요한 스코프 생성을 막아 추후 덮어써지는 등의 이름 충돌을 막을 수 있기 때문이죠.",
        "score": 7
    },
    {
        "id": "33",
        "name": "이웅기",
        "etc": "객체 리터럴에 대한 정의를 좀더 자세히 내려봅시다.",
        "score": 7
    }
]