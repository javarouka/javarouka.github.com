- 자바스크립트를 깨우치다.
// http://www.yes24.com/24/goods/9198112?scode=032&OzSrank=6

Chapter 1. 자바스크립트 객체
객체 만들기
자바스크립트 생성자는 객체 인스턴스를 생성하고 반환한다
자바스크립트 네이티브 / 내장 객체 생성자
사용자 정의 객체 생성자 함수
new연산자를 사용한 생성자 인스턴스 생성
리터럴을 사용한 값 생성하기
원시값(=단순값)
원시값 null, undefined, “string”, 10, true, false는 객체가 아니다
원시값은 어떻게 저장?복사되는가
원시값은 값 자체를 비교한다
문자열, 숫자, 불리언 원시값을 객체처럼 사용하면 객체처럼 동작한다
복합 객체(=합성 객체)
복합 객체는 어떻게 저장?복사되는가
복합 객체는 참조를 비교한다
복합 객체는 동적 속성을 포함한다
typeof 연산자
동적 속성 덕분에 객체 수정이 가능하다
생성자 인스턴스에는 자신의 생성자 함수를 가리키는 속성이 있다
객체가 특정 생성자 함수의 인스턴스인지 확인하기
생성자를 통해 만든 인스턴스에 인스턴스 속성 추가하기
“자바스크립트 객체”와 “Object( ) 객체”의 의미

Chapter 2. 객체와 속성 다루기
복합 객체는 자바스크립트 자료형의 대부분을 속성으로 포함할 수 있다
복합 객체에 다른 객체 포함하기
점 표기법과 각괄호 표기법을 사용한 객체 속성 접근
객체 속성 삭제하기
객체 속성의 참조를 찾는 법
hasOwnProperty를 사용해 프로토타입 체인에서 상속받은 속성인지 확인하기
in연산자를 사용해 객체가 주어진 속성을 포함하는지 확인하기
for in루프를 사용해 객체의 속성 탐색하기
호스트 객체 vs. 네이티브 객체
Underscore.js를 사용한 객체 확장

Chapter 3. Object( )
Object( ) 객체 사용
Object( ) 매개 변수
Object( )의 속성과 메소드
Object( ) 객체 인스턴스의 속성과 메소드
“객체 리터럴”을 사용한 Object( ) 객체 생성
모든 객체는 Object.prototype을 상속받는다

Chapter 4. Function( )
Function( ) 객체 사용
Function( ) 매개변수
Function( ) 속성과 메소드
Function( ) 객체의 인스턴스 속성과 메소드
함수는 항상 값을 반환한다
함수는 1급 클래스다(문법은 물론 값으로도)
함수에 매개변수 전달하기 
this와 arguments 
arguments.callee속성
함수 인스턴스의 length속성과 arguments.length 
함수 매개변수 재정의
함수 완료 전에 반환하기(실행 종료)
함수를 정의하는 세 가지 방법
함수를 호출하는 네 가지 패턴
익명 함수 
자기 호출 표현식
자기 호출 익명 함수
함수는 중첩될 수 있다
함수에 함수 전달하기 / 함수에서 함수 반환하기
함수가 정의되기 전에 함수를 호출하기(함수 호이스팅)
함수는 자신을 호출할 수 있다(재귀 호출)

Chapter 5. 머리/전역 객체
머리 객체의 사용
머리 객체에 포함된 전역 함수
머리 객체 vs. 전역 속성, 전역 변수
머리 객체 참조하기
머리 객체는 생략될 수 있다

Chapter 6. this 키워드
this의 사용
this의 값은 어떻게 정해지는가
중첩된 함수의 this는 머리 객체를 참조한다
중첩된 함수 문제는 스코프 체인을 사용해 우회하라 
call( ) 또는 apply( )를 사용한 this값 설정 
사용자 정의 생성자 함수 내에서 this키워드 사용하기 
프로토타입 메소드 안의 this는 생성자 인스턴스를 참조한다

Chapter 7. 스코프와 클로저
자바스크립트의 스코프
자바스크립트에는 블록 스코프가 없다
함수 내에서 변수 선언 시 var를 사용해 스코프 문제 피하기
스코프 체인(문법적 스코프)
스코프 체인을 검색할 때는 가장 처음 발견한 값을 반환한다
스코프는 함수를 정의할 때 결정된다
스코프 체인이 클로저를 만든다

Chapter 8. 함수의 프로토타입
프로토타입 체인
prototype속성이 왜 중요한가
모든 Function( ) 인스턴스에는 prototype속성이 있다
prototype속성은 Object( ) 객체
생성자 함수를 통해 만든 인스턴스는 생성자 함수의 prototype속성과 연결되어 있다
프로토타입 체인의 끝은 Object.prototype이다 
프로토타입 체인은 체인에서 제일 먼저 찾은 속성을 반환한다
prototype속성을 새 객체로 대체하면 기본 constructor속성이 삭제된다
프로토타입에서 상속한 속성은 가장 최근의 값을 사용한다
prototype속성을 새 객체로 대체하면 이전에 만든 인스턴스는 갱신되지 않는다
사용자 정의 생성자도 네이티브 생성자처럼 프로토타입을 상속할 수 있다
상속 체인 만들기

Chapter 9. Array( )
Array( ) 객체의 사용
Array( ) 매개변수
Array( ) 속성과 메소드
Array객체 인스턴스의 속성과 메소드
배열 만들기
배열에 값을 추가하고 갱신하기
크기와 색인 
미리 설정한 크기로 배열 만들기
배열의 크기를 설정하면 값을 추가하거나 제거할 수 있다
다른 배열을 포함한 배열(다중 배열) 
배열을 앞뒤로 훑기

Chapter 10. String( ) 
String( ) 객체의 사용
String( ) 매개변수
String( ) 속성과 메소드 
String객체 인스턴스의 속성과 메소드 

Chapter 11. Number( )
Number( ) 객체의 사용
정수와 실수
Number( ) 매개변수
Number( ) 속성 
Number객체 인스턴스의 속성과 메소드

Chapter 12. Boolean( )
Boolean( ) 객체의 사용 
Boolean( ) 매개변수 
Boolean( )의 속성과 메소드 
Boolean객체 인스턴스의 속성과 메소드
false복합 객체는 true로 변환된다
일부 값은 false이고, 그 외는 true다

Chapter 13. 원시 문자열, 숫자, 불리언값 다루기
원시/리터럴 값은 속성에 접근할 때 객체로 변환된다
평소에는 원시 문자열, 숫자, 불리언값을 사용하라 

Chapter 14. Null
null값 사용 
typeof null==“object” 

Chapter 15. BUndefined
undefined값
자바스크립트 ECMAScript 3이상에서 undefined는 전역 변수로 선언된다

Chapter 16. Math 함수
내장 Math객체
Math객체의 속성과 메소드 
Math는 생성자 함수가 아니다
Math는 변경할 수 없는 상수를 포함한다